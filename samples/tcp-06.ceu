#if 0
#@ Description: Sequential "echo" client.
#@  - see `tcp-01.ceu`
#@ Usage:
#@  - create an echo server in the command line:
#@  $ mkfifo fifo
#@  $ cat fifo  | nc -l 7000 -v | cat  > fifo
#@ http://unix.stackexchange.com/questions/147977/netcat-echo-server-possible-with-pipes-instead-of-commands-as-strings
#@ Features:
#@  - UV_CONNECT
#endif

#include "c.ceu"
#include "uv.ceu"

input (_uv_connect_t&&,int) UV_CONNECT;
input (_uv_stream_t&&,_ssize_t, _uv_buf_t&&) UV_READ;
input (_uv_write_t&&,int) UV_WRITE;

#define DEFAULT_PORT 7000
#define BUFFER_MAX   10

var _uv_tcp_t client = _uv_tcp_t();
_ceu_uv_tcp_init(&&client)
    finalize with
        _uv_close((_uv_handle_t&&)&&client, null);
    end;

var _uv_connect_t connect = _uv_connect_t();
var _sockaddr_in dest = _sockaddr_in();
_uv_ip4_addr("127.0.0.1", DEFAULT_PORT, &&dest);
_ceu_uv_tcp_connect(&&connect, &&client, (_sockaddr&&)&&dest);

var _uv_connect_t&& c;
var int status;
(c,status) = await UV_CONNECT until c==&&connect;
_assert(status == 0);

loop do
    await 1s;
    var char[] string = [] .. "Alo mundo\n";
    do UV_Stream_Write.build(&_UV_STREAM_ALIAS(client), &string);
    string = [].."";
    do UV_Stream_ReadLine.build(&_UV_STREAM_ALIAS(client), &string);
    _printf("%s", (char&&)&&string);
end

escape 0;
