#if 0
#@ Description: Parallel "echo" servers.
#@  - same as `tcp-03.ceu`
#@  - server "7000" echoes back on every character
#@  - server "7001" echoes back on every line
#@ Features:
#@  - class Handler, Handler0, Handler1
#endif

#include "c.ceu"
#include "uv.ceu"

input (_uv_stream_t&&,int) UV_LISTEN;
input (_uv_stream_t&&,_ssize_t, _uv_buf_t&&) UV_READ;
input (_uv_write_t&&,int) UV_WRITE;

#define DEFAULT_PORT    7000
#define DEFAULT_BACKLOG 128
#define BUFFER_MAX      10

class Handler0 with
    var _uv_tcp_t& tcp;
    function (_uv_tcp_t& tcp)=>Handler0 build;
do
    function (_uv_tcp_t& tcp)=>Handler0 build do
        this.tcp = &tcp;
    end

    loop do
        var char[] string;
        var UV_Stream_Read r = UV_Stream_Read.build(&_UV_STREAM_ALIAS(this.tcp),&string);
        var int n = await r.ok;
        _assert(n != 0);
        if n < 0 then
            escape n;
        end
        string = []..string..['\0'];
        _printf("[handler-0] %s\n", (_char&&)&&string);
        do UV_Stream_Write.build(&_UV_STREAM_ALIAS(tcp), &string);
    end
end

class Handler1 with
    var _uv_tcp_t& tcp;
    function (_uv_tcp_t& tcp)=>Handler1 build;
do
    function (_uv_tcp_t& tcp)=>Handler1 build do
        this.tcp = &tcp;
    end

    loop do
        var char[] string;
        do UV_Stream_ReadLine.build(&_UV_STREAM_ALIAS(tcp), &string);
        string = []..string..['\0'];
        _printf("[handler-1] %s", (_char&&)&&string);
        do UV_Stream_Write.build(&_UV_STREAM_ALIAS(tcp), &string);
    end
end

class Handler with
    var _uv_tcp_t& tcp;
    function (_uv_tcp_t& tcp)=>Handler build;
do
    function (_uv_tcp_t& tcp)=>Handler build do
        this.tcp = &tcp;
    end

    var _sockaddr_in sock = _sockaddr_in();
    var int len = sizeof(_sockaddr_in);
    var int ret = _uv_tcp_getsockname(&&this.tcp, (_sockaddr&&)&&sock, &&len);
    _assert(ret == 0);
    var int port = _ntohs(sock.sin_port);

    var int err = 0;

    if port == DEFAULT_PORT then
        err = do Handler0.build(&tcp);
    else/if port == DEFAULT_PORT+1 then
        err = do Handler1.build(&tcp);
    else
        _assert(0);
    end

    _printf("DONE: %s\n", _uv_strerror(err));
end

class Connection with
    function (_uv_tcp_t& server)=>Connection build;
    var _uv_tcp_t& server;
do
    function (_uv_tcp_t& server)=>Connection build do
        this.server = &server;
    end

    // CLIENT
    var _uv_tcp_t&? client_;
    finalize
        client_ = &_malloc(sizeof(_uv_tcp_t));
    with
        // free after uv_close
    end
    var _uv_tcp_t& client = &client_!;
    _ceu_uv_tcp_init(&&client)
        finalize with
            _ceu_uv_close((_uv_handle_t&&)&&client);
        end;

    // ACCEPT
    var int ret = _uv_accept((_uv_stream_t&&)&&server,(_uv_stream_t&&)&&client);
    _assert(ret == 0);

    do Handler.build(&client);
end

class Server with
    var _char&& ip;
    var int port;
    var int backlog;
    function (@hold _char&& ip, int port, int backlog)=>Server build;
do
    function (@hold _char&& ip, int port, int backlog)=>Server build do
        this.ip     := ip;
        this.port    = port;
        this.backlog = backlog;
    end

    var _uv_tcp_t&? server_;
    finalize
        server_ = &_malloc(sizeof(_uv_tcp_t));
    with
        // free after uv_close
    end
    var _uv_tcp_t& server = &server_!;
    _ceu_uv_tcp_init(&&server)
        finalize with
            _ceu_uv_close((_uv_handle_t&&)&&server);
        end;

    var _sockaddr_in addr = _sockaddr_in();
    _uv_ip4_addr(this.ip, this.port, &&addr);
    _uv_tcp_bind(&&server, (_sockaddr&&)&&addr, 0);
    do
        var int ret = _ceu_uv_listen((_uv_stream_t&&)&&server, this.backlog);
        _assert(ret == 0);
    end

    every (s,status) in UV_LISTEN do
        if s == (_uv_stream_t&&)&&server then
            _assert(status >= 0);
            spawn Connection.build(&server);
        end
    end
end

var Server _ = Server.build("0.0.0.0", DEFAULT_PORT+0, DEFAULT_BACKLOG);
var Server _ = Server.build("0.0.0.0", DEFAULT_PORT+1, DEFAULT_BACKLOG);

_printf("I will terminate after 10s...\n");
await 10s;
_printf("DONE!\n");
escape 0;
