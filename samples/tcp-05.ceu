#if 0
#@ Description: Parallel "echo" servers.
#@  - same as `tcp-03.ceu`
#@  - server "7000" echoes back on every character
#@  - server "7001" echoes back on every line
#@ Features:
#@  - class Handler, Handler0, Handler1
#endif

#include "uv/tcp.ceu"

#define DEFAULT_PORT    7000
#define DEFAULT_BACKLOG 128
#define BUFFER_MAX      10

code/await Handler0 (var& _uv_tcp_t_ptr tcp) => int
do
    loop do
        vector[] byte string;
        do/_
            event& ssize ok;
            watching UV_Stream_Read(&_UV_STREAM_ALIAS(tcp),&string)
                        => (ok)
            do
                var ssize n = await ok;
                _ceu_dbg_assert((n as int) != 0);
                if (n as int) < 0 then
                    escape (n as int);
                end
            end
        end
        string = string..[{'\0'}];
        _printf("[handler-0] %s\n", &&string[0]);
        await UV_Stream_Write(&_UV_STREAM_ALIAS(tcp), &string);
    end
end

code/await Handler1 (var& _uv_tcp_t_ptr tcp) => int
do
    loop do
        vector[] byte string;
        await UV_Stream_ReadLine(&_UV_STREAM_ALIAS(tcp), &string);
        string = string..[{'\0'}];
        _printf("[handler-1] %s", &&string[0]);
        await UV_Stream_Write(&_UV_STREAM_ALIAS(tcp), &string);
    end
end

code/await Handler (var& _uv_tcp_t_ptr tcp) => void
do
    var _sockaddr_in sock = _;
    var int len = sizeof(_sockaddr_in) as int;
    var int ret = _uv_tcp_getsockname(tcp, (&&sock as _sockaddr&&), &&len);
    _ceu_dbg_assert(ret == 0);
    var int port = _ntohs(sock.sin_port);

    var int err = 0;

    if port == DEFAULT_PORT then
        err = await Handler0(&tcp);
    else/if port == DEFAULT_PORT+1 then
        err = await Handler1(&tcp);
    else
        _ceu_dbg_assert(0);
    end

    _printf("DONE: %s\n", _uv_strerror(err));
end

code/await Connect (var& _uv_tcp_t server) => void
do
    // CLIENT
    var& _uv_tcp_t_ptr? client_ = &_malloc(sizeof(_uv_tcp_t))
        finalize (client_) with
            // free after uv_close
        end;
    var& _uv_tcp_t_ptr client = &client_!;
    _ceu_uv_tcp_init(client);
    do finalize with
        _ceu_uv_close(client as _uv_handle_t&&);
    end

    // ACCEPT
    do
        var int ret = _uv_accept(&&server as _uv_stream_t&&,client as _uv_stream_t&&);
        _ceu_dbg_assert(ret == 0);
    end

    await Handler(&client);
end

code/await Server (var _char&& ip, var int port, var int backlog) => void
do
    var& _uv_tcp_t_ptr? server_ = &_malloc(sizeof(_uv_tcp_t))
        finalize (server_) with
            // free after uv_close
        end;
    var& _uv_tcp_t_ptr server = &server_!;
    _ceu_uv_tcp_init(server);
    do finalize with
        _uv_close(server as _uv_handle_t&&, _ceu_uv_free);
    end

    var _sockaddr_in addr = _;
    _uv_ip4_addr(&&ip[0], port, &&addr);
    _uv_tcp_bind(server, &&addr as _sockaddr&&, 0);
    do
        var int ret = _ceu_uv_listen(server as _uv_stream_t&&, backlog);
        _ceu_dbg_assert(ret == 0);
    end

    pool[10] Connect cs;

    var _uv_stream_t&& s;
    var int status;
    every (s,status) in UV_LISTEN do
        if s == (server as _uv_stream_t&&) then
            _ceu_dbg_assert(status >= 0);
            spawn Connect(&server) in cs;
        end
    end
end

spawn Server("0.0.0.0", DEFAULT_PORT+0, DEFAULT_BACKLOG);
spawn Server("0.0.0.0", DEFAULT_PORT+1, DEFAULT_BACKLOG);

_printf("I will terminate after 10s...\n");
await 10s;
_printf("DONE!\n");

escape 0;
