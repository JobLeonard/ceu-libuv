#if 0
#@ Description: Parallel "echo" servers.
#@  - same as `tcp-02.ceu`
#@  - executes two servers
#@ Usage:
#@  - connect "telnet" clients to port 7000 or 7001
#@  - write long string
#@      - ERROR!
#@ Features:
#@  - class Server
#endif

#include "c.ceu"
#include "uv.ceu"

input (_uv_stream_t&&,int) UV_LISTEN;
input (_uv_stream_t&&,_ssize_t, _uv_buf_t&&) UV_READ;
input (_uv_write_t&&,int) UV_WRITE;

#define DEFAULT_PORT    7000
#define DEFAULT_BACKLOG 128
#define BUFFER_MAX      10

class Connection with
    function (_uv_tcp_t& server)=>Connection build;
    var _uv_tcp_t& server;
do
    function (_uv_tcp_t& server)=>Connection build do
        this.server = &server;
    end

    // CLIENT
    var _uv_tcp_t&? client_;
    finalize
        client_ = &_malloc(sizeof(_uv_tcp_t));
    with
        // free after uv_close
    end
    var _uv_tcp_t& client = &client_!;
    _ceu_uv_tcp_init(&&client)
        finalize with
            _uv_close((_uv_handle_t&&)&&client, _ceu_uv_free);
        end;

    // ACCEPT
    do
        var int ret = _uv_accept((_uv_stream_t&&)&&server,(_uv_stream_t&&)&&client);
        _assert(ret == 0);
    end

    // READ/WRITE LOOP
    var _char[BUFFER_MAX] buf_ = [];
    var _ssize_t n_read = 0;
    loop do
        // READ
        do
            var _uv_buf_t buf = _uv_buf_init(buf_, BUFFER_MAX-1);
            var _ceu_uv_read_t r = _ceu_uv_read_t(buf,0);
            client.data = &&r;
            var int ret = _ceu_uv_read_start((_uv_stream_t&&)&&client)
                            finalize with end;
            //_printf("error: %s\n", _uv_strerror(ret));
            _assert(ret == 0);
            finalize with
                // finalize after each UV_READ
                _assert(r.has_pending_data == 0);
                _uv_read_stop((_uv_stream_t&&)&&client);
            end;

            var _uv_buf_t&& buf_r;
            var _uv_stream_t&& s;
            (s,n_read,buf_r) = await UV_READ until s==(_uv_stream_t&&)&&client;
            _assert(buf_r:base == buf.base);
            _assert(buf_r:len  == buf.len);
        end
        //_assert(n_read >= 0);  // connection closed?
        if n_read < 0 then
            _fprintf(_stderr, "[Connection] error: %s\n", _uv_strerror(n_read));
            break;
        else/if n_read == 0 then
            _assert(0);
        end

        // not reading anymore

        // WRITE
        buf_[n_read] = '\0';
        var _uv_write_t req_write = _uv_write_t();
        var _uv_buf_t buf = _uv_buf_init(buf_, n_read);
        _ceu_uv_write(&&req_write, (_uv_stream_t&&)&&client, &&buf);
        var _uv_write_t&& w;
        var int status;
        (w, status) = await UV_WRITE until w==&&req_write;
        _assert(status == 0);
    end
end

class Server with
    var _char&& ip;
    var int port;
    var int backlog;
    function (@hold _char&& ip, int port, int backlog)=>Server build;
do
    function (@hold _char&& ip, int port, int backlog)=>Server build do
        this.ip     := ip;
        this.port    = port;
        this.backlog = backlog;
    end

    var _uv_tcp_t&? server_;
    finalize
        server_ = &_malloc(sizeof(_uv_tcp_t));
    with
        // free after uv_close
    end
    var _uv_tcp_t& server = &server_!;
    _ceu_uv_tcp_init(&&server)
        finalize with
            _uv_close((_uv_handle_t&&)&&server, _ceu_uv_free);
        end;

    var _sockaddr_in addr = _sockaddr_in();
    _uv_ip4_addr(this.ip, this.port, &&addr);
    _uv_tcp_bind(&&server, (_sockaddr&&)&&addr, 0);
    do
        var int ret = _ceu_uv_listen((_uv_stream_t&&)&&server, this.backlog);
        _assert(ret == 0);
    end

    every (s,status) in UV_LISTEN do
        if s == (_uv_stream_t&&)&&server then
            _assert(status >= 0);
            spawn Connection.build(&server);
        end
    end
end

var Server _ = Server.build("0.0.0.0", DEFAULT_PORT+0, DEFAULT_BACKLOG);
var Server _ = Server.build("0.0.0.0", DEFAULT_PORT+1, DEFAULT_BACKLOG);

_printf("I will terminate after 10s...\n");
await 10s;
_printf("DONE!\n");
escape 0;
