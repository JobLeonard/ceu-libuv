#if 0
#@ Description: Parallel "echo" server.
#@  - same as `tcp-01.ceu`
#@  - accepts multiple clients at the same time
#@ Usage:
#@  - connect "telnet" clients to port 7000
#@  - write long string
#@      - ERROR!
#@ Features:
#@  - class Connection
#@  - spawn Connection
#endif

#include "c.ceu"
#include "uv.ceu"

input (_uv_stream_t&&,int) UV_LISTEN;
input (_uv_stream_t&&,_ssize_t, _uv_buf_t&&) UV_READ;
input (_uv_write_t&&,int) UV_WRITE;

#define DEFAULT_PORT    7000
#define DEFAULT_BACKLOG 128
#define BUFFER_MAX      10

var _uv_tcp_t server = _uv_tcp_t();
_ceu_uv_tcp_init(&&server)
    finalize with
        _uv_close((_uv_handle_t&&)&&server, null);
    end;

var _sockaddr_in addr = _sockaddr_in();
_uv_ip4_addr("0.0.0.0", DEFAULT_PORT, &&addr);
_uv_tcp_bind(&&server, (_sockaddr&&)&&addr, 0);
do
    var int ret = _ceu_uv_listen((_uv_stream_t&&)&&server, DEFAULT_BACKLOG);
    _assert(ret == 0);
end

class Connection with
    function (_uv_tcp_t& server)=>Connection build;
    var _uv_tcp_t& server;
do
    function (_uv_tcp_t& server)=>Connection build do
        this.server = &server;
    end

    // CLIENT
    var _uv_tcp_t&? client_;
    finalize
        client_ = &_malloc(sizeof(_uv_tcp_t));
    with
        // free after uv_close
    end
    var _uv_tcp_t& client = &client_!;
    _ceu_uv_tcp_init(&&client)
        finalize with
            _ceu_uv_close((_uv_handle_t&&)&&client);
        end;

    // ACCEPT
    do
        var int ret = _uv_accept((_uv_stream_t&&)&&server,(_uv_stream_t&&)&&client);
        _assert(ret == 0);
    end

    // READ/WRITE LOOP

    var byte[BUFFER_MAX] buf;
    var _ssize_t n_read = 0;

    spawn do
        every (s,err) in UV_ERROR do
            _fprintf(_stderr, "[error]: %s\n", _uv_strerror(err));
        end
    end

    loop do
        // READ
        do
            client.data = &&buf;
            var int ret = _ceu_uv_read_start((_uv_stream_t&&)&&client)
                            finalize with end;
            finalize with
                // finalize after each UV_READ
                _uv_read_stop((_uv_stream_t&&)&&client);
            end;
            //_printf("error: %s\n", _uv_strerror(ret));
            _assert(ret == 0);

            var _uv_buf_t&& buf_r;
            var _uv_stream_t&& s;
            (s,n_read,buf_r) = await UV_READ until s==(_uv_stream_t&&)&&client;
            //_assert((_byte&&)buf_r:base == ((_byte&&)&&buf));
            //_assert(buf_r:len == $$buf);
        end
        //_assert(n_read >= 0);  // connection closed?
        if n_read < 0 then
            _fprintf(_stderr, "[read]: %s\n", _uv_strerror(n_read));
            break;
        else/if n_read == 0 then
            _assert(0);
        end

        // not reading anymore

        // WRITE
        buf = []..buf..['\0'];
        var _uv_write_t req_write = _uv_write_t();
        var _uv_buf_t buf_ = _uv_buf_init((_byte&&)&&buf, n_read);
        _ceu_uv_write(&&req_write, (_uv_stream_t&&)&&client, &&buf_);
        var _uv_write_t&& w;
        var int status;
        (w, status) = await UV_WRITE until w==&&req_write;
        _assert(status == 0);
    end
end

_printf("I will terminate after 10s...\n");

watching 10s do
    every (s,status) in UV_LISTEN do
        if s == (_uv_stream_t&&)&&server then
            _assert(status >= 0);
            spawn Connection.build(&server);
        end
    end
end

_printf("DONE!\n");
escape 0;
