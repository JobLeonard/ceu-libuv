#ifndef _UV_CEU
#define _UV_CEU

native/pre do
    ##include <uv.h>

    ##define PURIFY(e) e

end

native/pos do
    ##define ceu_callback_env(cmd,evt,params) ceu_uv_callback(cmd,evt,params)

    uv_loop_t ceu_uv_loop;

    uv_timer_t ceu_uv_timer;
    s32 ceu_uv_timer_next_us;
    void ceu_uv_timer_cb (uv_timer_t* timer) {
        ceu_dbg_assert(timer == &ceu_uv_timer);
        s32 us = ceu_uv_timer_next_us;
        ceu_go_ext(CEU_INPUT__WCLOCK, &us);
    }

    void ceu_uv_init (void) {
        signal(SIGPIPE, SIG_IGN); // TODO: fails on "uv_write" would crash otherwise

        uv_loop_init(&ceu_uv_loop);
        uv_timer_init(&ceu_uv_loop, &ceu_uv_timer);
    }

    void ceu_uv_step (void) {
        // TODO: detect/error if return w/o "escape"
        uv_run(&ceu_uv_loop, UV_RUN_ONCE);
    }

    void ceu_uv_wclock (s32 us) {
        if (us == CEU_WCLOCK_INACTIVE) {
            uv_timer_stop(&ceu_uv_timer);
        } else if (us <= 0) {
            ceu_uv_timer_next_us = 0;
            uv_timer_start(&ceu_uv_timer, ceu_uv_timer_cb, 0, 0);
        } else {
            ceu_uv_timer_next_us = us;
            uv_timer_start(&ceu_uv_timer, ceu_uv_timer_cb, ceu_uv_timer_next_us/1000, 0);
        }
    }

    tceu_callback_ret ceu_uv_callback (int cmd, tceu_callback_arg p1, tceu_callback_arg p2)
    {
        tceu_callback_ret ret;

        switch (cmd) {
            case CEU_CALLBACK_INIT:
                ret.is_handled = 1;
                ceu_uv_init();
                break;
            case CEU_CALLBACK_STEP:
                ret.is_handled = 1;
                ceu_uv_step();
                break;
            case CEU_CALLBACK_WCLOCK_MIN:
                ret.is_handled = 1;
                ceu_uv_wclock(p1.num);
            default:
                ret.is_handled = 0;
        }

        return ret;
    }

/* FS */

    ##define ceu_uv_fs_open(a,b,c,d)    uv_fs_open(&ceu_uv_loop,a,b,c,d,ceu_uv_fs_cb)
    ##define ceu_uv_fs_close(a,b)       uv_fs_close(&ceu_uv_loop,a,b,ceu_uv_fs_close_cb)
    ##define ceu_uv_fs_close_(a,b)      uv_fs_close(&ceu_uv_loop,a,b,NULL); \\
                                        ceu_uv_fs_close_cb(a)
    ##define ceu_uv_fs_read(a,b,c,d,e)  uv_fs_read(&ceu_uv_loop,a,b,c,d,e,ceu_uv_fs_cb)

    void ceu_uv_fs_cb (uv_fs_t* req) {
        ceu_go_ext(CEU_INPUT_FS, &req);
    }

    void ceu_uv_fs_close_cb (uv_fs_t* req) {
        //TODO???
        //assert(req->result == 0);
        uv_fs_req_cleanup(req);
    }

end

native _ceu_dbg_assert;
native/nohold _printf, _ceu_vector_setlen;

native/const
        _O_RDONLY,
;

native/plain
        _uv_buf_t,
        _uv_fs_t,
;

native
        _ceu_uv_fs_read,
        _ceu_uv_fs_open,
;

native/nohold
        _ceu_uv_fs_close,
        _ceu_uv_fs_close_,
        _uv_buf_init,
        _uv_fs_req_cleanup,
;

native/pure _PURIFY;

/* FS */

input _uv_fs_t&& FS;

data UV_FS_file with
    event void ok;
    var   int  fd;
end

code/await UV_FS_open (vector&[10] byte path, var int flags, var int mode)
                        => (var& UV_FS_file file)
                            => int
do
    var UV_FS_file file_ = val UV_FS_file(_, -1);
    file = &file_;

    var _uv_fs_t req_open  = _;
    var _uv_fs_t req_close = _;

    var int ret;
    do
        ret = _ceu_uv_fs_open(&&req_open, _PURIFY(&&path[0]), flags, mode);
    finalize (req_open) with
        _ceu_uv_fs_close_(&&req_close, req_open.result);
        _uv_fs_req_cleanup(&&req_open);
    end
    if ret < 0 then
        escape ret;
    end

    var _uv_fs_t&& req = await FS until req==&&req_open;
    file_.fd = req_open.result;
    emit file_.ok;

    await FOREVER;
end

code/await UV_FS_read (var& UV_FS_file file, vector&[] byte buf,
                       var usize size, var usize offset)
                        => ssize
do
    if $buf == 0 then
        buf = [0];      // avoids "out of bounds" below
    end

    var _uv_buf_t buf_ = _uv_buf_init(&&buf[0], size);
    var _uv_fs_t req_read = _;

    var ssize ret;
    do
        ret = _ceu_uv_fs_read(&&req_read, file.fd, &&buf_, 1, offset);
    finalize (req_read, buf_) with
        _uv_fs_req_cleanup(&&req_read);
    end
    if ret < 0 then
        escape ret;
    end

    var _uv_fs_t&& req = await FS until req==&&req_read;
    _ceu_vector_setlen(&&buf, req_read.result, 1);
    escape req_read.result;
end

#if 0


// TODO: int, u32 => ssize_t, size_t

#include "c.ceu"

native @plain
        _sockaddr,
        _sockaddr_in,
        _sockaddr_storage,
        _uv_connect_t,
        _uv_fs_t,
        _uv_handle_t,
        _uv_stat_t,
        _uv_stream_t,
        _uv_tcp_t,
        _uv_write_t;

native @pure
        _GET_HOST_U32(),
        _uv_is_readable(),
        _uv_is_writable(),
        _uv_strerror();

native @nohold
        _ceu_uv_close(),
        _ceu_uv_fs_close_(),
        _ceu_uv_listen(),       // TODO: unlisten?
        _ceu_uv_tcp_connect(),  // TODO: diconnect?
        _ceu_uv_tcp_getpeerport(),
        _ceu_uv_tcp_getsockport(),
        _ceu_uv_write(),        // TODO: write_stop?
        _uv_accept(),
        _uv_close(),
        _uv_inet_ntop(),
        _uv_ip4_addr(),
        _uv_read_stop(),
        _uv_tcp_bind(),         // TODO: unbind?
        _uv_tcp_getpeername(),
        _uv_tcp_getsockname();

native/pre do
    ##define UV_STREAM_ALIAS(x) ((uv_stream_t*)&x)
end

native do
    int ceu_uv_tcp_getpeerport (uv_tcp_t* tcp) {
        sockaddr_in name;
        int namelen = sizeof(name);
        uv_tcp_getpeername(tcp, (sockaddr*)&name, &namelen);
        char addr[16];
        uv_inet_ntop(AF_INET, &name.sin_addr, addr, sizeof(addr));
        int port = ntohs(name.sin_port);
        //_printf("%s:%d\n", (_char&&)&&addr, port);
        return port;
    }
    int ceu_uv_tcp_getsockport (uv_tcp_t* tcp) {
        sockaddr_in name;
        int namelen = sizeof(name);
        uv_tcp_getsockname(tcp, (sockaddr*)&name, &namelen);
        char addr[16];
        uv_inet_ntop(AF_INET, &name.sin_addr, addr, sizeof(addr));
        int port = ntohs(name.sin_port);
        //_printf("%s:%d\n", (_char&&)&&addr, port);
        return port;
    }
end

#define GET_HOST_U32(bytes,off) _ntohl(*((u32&&)&&(((_byte&&)&&bytes)[off])))

#define PUT_NETWORK_U32(bytes,off,host)             \
    do                                              \
        var u32 network = _htonl(host);             \
        _ceu_vector_copy_buffer(&&(bytes), off,     \
                                (byte&&)&&network,  \
                                sizeof(u32),1);     \
    end

input (_uv_stream_t&&,_ssize_t, _uv_buf_t&&) UV_READ;
input (_uv_write_t&&,int)   UV_WRITE;
input (_uv_stream_t&&,int)  UV_LISTEN;
input (_uv_connect_t&&,int) UV_CONNECT;
input (_uv_stream_t&&,int)  UV_ERROR;

class UV_FS_Read_Line with
    var UV_FS_open& open;
    var char[]&     line;
    var u32&        offset;
    function (UV_FS_open& open, byte[]& line, u32& offset)=>UV_FS_Read_Line run;
do
    function (UV_FS_open& open, byte[]& line, u32& offset)=>UV_FS_Read_Line run do
        this.open   = &open;
        this.line   = &line;
        this.offset = &offset;
    end

    // TODO: reading 1-by-1
    loop do
        var char[1] buf;
        var int ret = do UV_FS_read.run(&open, &buf, 1, this.offset);
        this.offset = offset + 1;
        if ret == 0 then
            escape _UV_EOF;
        else
            _assert(ret == 1);
        end
        if buf[0] == '\n' then
            break;
        end
        this.line = []..line..buf;
    end

    escape 0;
end

class UV_FS_write with
    var UV_FS_open& open;
    var byte[]& buf;
    var int size, offset;
    function (UV_FS_open& open, byte[]& buf, int size, int offset)=>UV_FS_write run;
do
    function (UV_FS_open& open, byte[]& buf, int size, int offset)=>UV_FS_write run do
        this.open   = &open;
        this.buf    = &buf;
        this.size   = size;
        this.offset = offset;
    end

    var _uv_buf_t buf_ = _uv_buf_init((_char&&)(_byte&&)&&this.buf, this.size);
    var _uv_fs_t req_write = _uv_fs_t();
    finalize with
        _uv_fs_req_cleanup(&&req_write);
    end

    var int ret = _ceu_uv_fs_write(&&req_write, this.open.fd, &&buf_, 1, this.offset)
                    finalize with
                        _uv_fs_req_cleanup(&&req_write);
                    end;
    if ret < 0 then
        escape ret;
    end
    var _uv_fs_t&& req = await FS until req==&&req_write;
    escape req_write.result;
end

class UV_FS_fstat with
    var UV_FS_open& open;
    var _uv_stat_t& stat;
    function (UV_FS_open& open, _uv_stat_t& stat)=>UV_FS_fstat run;
do
    function (UV_FS_open& open, _uv_stat_t& stat)=>UV_FS_fstat run do
        this.open = &open;
        this.stat = &stat;
    end

    var _uv_fs_t req_fstat = _uv_fs_t();
    finalize with
        _uv_fs_req_cleanup(&&req_fstat);
    end

    var int ret = _ceu_uv_fs_fstat(&&req_fstat, this.open.fd)
                    finalize with
                        _uv_fs_req_cleanup(&&req_fstat);
                    end;
    if ret < 0 then
        escape ret;
    end
    var _uv_fs_t&& req = await FS until req==&&req_fstat;

    this.stat = *((_uv_stat_t&&)req_fstat.ptr);

    escape 0;
end

// TODO: rename UV_Stream_Reader/Writer? build->run?
// TODO: function to signal "consumption", if the org is finalized w/ pending
//       consumption, then error

class UV_Stream_Read with
    var _uv_stream_t& stream;
    var byte[]&       bytes;
    var u32           next = 0;
    function (_uv_stream_t& stream, byte[]& bytes)=>UV_Stream_Read build;
    event int ok;
    function (void)=>void reset;
do
    function (_uv_stream_t& stream, byte[]& bytes)=>UV_Stream_Read build do
        this.stream = &stream;
        this.bytes  = &bytes;
    end
    function (void)=>void reset do
        $this.bytes = 0;
        this.next = 0;
    end

    $bytes = 0;

    this.stream.data = &&this.bytes;
    _assert(_uv_is_readable(&&this.stream));
    var int err = _ceu_uv_read_start(&&this.stream)
                    finalize with
                        _uv_read_stop(&&this.stream);
                    end;
    //_fprintf(_stderr, "uv-error: %s\n", _uv_strerror(err));
    _assert(err == 0);

    par/or do
        var _uv_stream_t&& s;
        var int err_;
        (s,err_) = await UV_ERROR until (s==&&this.stream);
        err = err_;
        emit this.ok => err;
    with
        loop do
            var _uv_buf_t&& buf_r;
            var _uv_stream_t&& s;
            var u32 n;
            (s,n,buf_r) = await UV_READ
                          until s == &&this.stream;// and
                                //((_byte&&)buf_r:base == ((_byte&&)&&this.bytes));

            _assert(n != 0); // TODO: if this happens, try to understand why
            _assert(n >= 0); // UV_ERROR aborts me

            next = next + n;
            emit this.ok => n;
        end
    end
    escape err;
end

class UV_Stream_ReadUntil with
    var UV_Stream_Read& reader;
    var u32             limit;
    function (UV_Stream_Read& reader, u32 limit)=>UV_Stream_ReadUntil run;
do
    function (UV_Stream_Read& reader, u32 limit)=>UV_Stream_ReadUntil run do
        this.reader = &reader;
        this.limit  = limit;
    end

    if reader.next >= this.limit then
        escape 0;
    end

    watching this.reader do
        loop do
            var int dt = await this.reader.ok;
            if dt < 0 then
                // TODO: versions w/ assert/escape
                _printf("error[%d]: %s\n", dt, _uv_strerror(dt));
                _assert(0);
                escape dt;
            end
            if this.reader.next >= this.limit then
                escape 0;
            end
        end
    end

    escape -1;
end

class UV_Stream_ReadLine with
    var _uv_stream_t& stream;
    var char[]&       string;
    function (_uv_stream_t& stream, char[]& string)=>UV_Stream_ReadLine build;
do
    function (_uv_stream_t& stream, char[]& string)=>UV_Stream_ReadLine build do
        this.stream = &stream;
        this.string = &string;
    end

    var UV_Stream_Read r = UV_Stream_Read.build(&this.stream,&this.string);

    watching r do
        loop do
            await r.ok;
            var char n=0, c=0;
            var int ret = _sscanf((_char&&)&&this.string, "%*[^\n]%[\n]%c", &&n,&&c);
            _assert(ret < 2);
            if ret == 1 then
                _assert(n == '\n');
                escape 0;
            end
        end
    end

    // client code must enclose with UV_ERROR
    _assert(0);
    escape -1;
end

class UV_Stream_Write with
input:
    var _uv_stream_t& stream;
    var byte[]&       bytes;
    var u32           starting, excluding;
    function (_uv_stream_t& stream, byte[]& bytes)=>UV_Stream_Write build;
    function (_uv_stream_t& stream, byte[]& bytes, u32 starting, u32 excluding)=>UV_Stream_Write build2;
do
    function (_uv_stream_t& stream, byte[]& bytes)=>UV_Stream_Write build do
        this.stream    = &stream;
        this.bytes     = &bytes;
        this.starting  = 0;
        this.excluding = $bytes;
    end
    function (_uv_stream_t& stream, byte[]& bytes, u32 starting, u32 excluding)=>UV_Stream_Write build2 do
        this.stream    = &stream;
        this.bytes     = &bytes;
        this.starting  = starting;
        this.excluding = excluding;
    end
    _assert($bytes >= this.excluding);
    _assert(this.starting <= this.excluding);

    // WRITE
    var _uv_write_t&? req_write;
    finalize
        req_write = &_malloc(sizeof(_uv_write_t));
    with
        // free on uv callback
    end

    var _uv_buf_t buf = _uv_buf_init((_char&&)(_byte&&)&&this.bytes, $this.bytes);
                  buf.base = buf.base+starting;
                  buf.len  = excluding-starting;
    _assert(_uv_is_writable(&&this.stream));
    var int ret = _ceu_uv_write(&&req_write!, &&this.stream, &&buf);
    _assert(ret >= 0);
    var _uv_write_t&& w;
    var int status;
    (w, status) = await UV_WRITE until w==&&req_write!;

    // force external UV_ERROR
    _assert(status == 0);
end

class UV_TCP_Client with
    var char[]& ip;
    var int port;
    event int ok;
output:
    var _uv_tcp_t& tcp;

    function (char[]& ip, int port)=>UV_TCP_Client build;
do
    function (char[]& ip, int port)=>UV_TCP_Client build do
        this.ip   = &ip;
        this.port = port;
    end

    // CLIENT
    var _uv_tcp_t&? tcp_;
    finalize
        tcp_ = &_malloc(sizeof(_uv_tcp_t));
    with
        // free after uv_close
    end
    this.tcp = &tcp_!;
    _ceu_uv_tcp_init(&&tcp)
        finalize with
            _ceu_uv_close((_uv_handle_t&&)&&tcp);
        end;

    var _uv_connect_t&? connect_;
    finalize
        connect_ = &_malloc(sizeof(_uv_connect_t));
    with
        // free on uv callback
    end

    var _sockaddr_in dest = _sockaddr_in();
    _uv_ip4_addr((_char&&)&&this.ip, this.port, &&dest);
    _ceu_uv_tcp_connect(&&connect_!, &&tcp, (_sockaddr&&)&&dest);

    do
        var _uv_connect_t&& c;
        var int err;
        (c,err) = await UV_CONNECT until c==&&connect_!;
        emit this.ok => err;
    end

    do
        var _uv_stream_t&& s;
        var int err;
        (s,err) = await UV_ERROR until (s==(_uv_stream_t&&)&&this.tcp);
        escape err;
    end
end

#endif
#endif
