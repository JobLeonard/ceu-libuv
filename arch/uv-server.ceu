#ifndef _UV_SERVER_CEU
#define _UV_SERVER_CEU

#include "uv.ceu"

class UV_TCP_Server_Connection with
    function (_uv_tcp_t& server)=>UV_TCP_Server_Connection build;
    var _uv_tcp_t& server;
do
    function (_uv_tcp_t& server)=>UV_TCP_Server_Connection build do
        this.server = &server;
    end

    // CLIENT
    var _uv_tcp_t&? client_;
    finalize
        client_ = &_malloc(sizeof(_uv_tcp_t));
    with
        // free after uv_close
    end
    var _uv_tcp_t& client = &client_!;
    _ceu_uv_tcp_init(&&client)
        finalize with
            _ceu_uv_close((_uv_handle_t&&)&&client);
        end;

    // ACCEPT
    var int ret = _uv_accept((_uv_stream_t&&)&&server,(_uv_stream_t&&)&&client);
    _assert(ret == 0);

#ifdef UV_TCP_SERVER_HANDLER_CEU
#define _UV_STRINGIFY(X) #X
#define UV_STRINGIFY(X) _UV_STRINGIFY(X)
#include UV_STRINGIFY(UV_TCP_SERVER_HANDLER_CEU)
    do UV_TCP_Server_Handler.build(&client);
#else
    _assert(0);
#endif
end

class UV_TCP_Server with
    var char[]& ip;
    var int port;
    var int backlog;
    function (char[]& ip, int port, int backlog)=>UV_TCP_Server build;
do
    function (char[]& ip, int port, int backlog)=>UV_TCP_Server build do
        this.ip      = &ip;
        this.port    = port;
        this.backlog = backlog;
    end

    var _uv_tcp_t&? server_;
    finalize
        server_ = &_malloc(sizeof(_uv_tcp_t));
    with
        // free after uv_close
    end
    var _uv_tcp_t& server = &server_!;
    _ceu_uv_tcp_init(&&server)
        finalize with
            _ceu_uv_close((_uv_handle_t&&)&&server);
        end;

    var _sockaddr_in addr = _sockaddr_in();
    _uv_ip4_addr((_char&&)&&this.ip, this.port, &&addr);
    _uv_tcp_bind(&&server, (_sockaddr&&)&&addr, 0);
    do
        var int ret = _ceu_uv_listen((_uv_stream_t&&)&&server, this.backlog);
        _assert(ret == 0);
    end

    every (s,status) in UV_LISTEN do
        if s == (_uv_stream_t&&)&&server then
            _assert(status >= 0);
            spawn UV_TCP_Server_Connection.build(&server);
        end
    end
end

#endif
