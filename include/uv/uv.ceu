#ifndef _UV_CEU
#define _UV_CEU

native/plain
    _mode_t,
    _uv_buf_t,
;

native/nohold
    _uv_buf_init,
    _uv_strerror,
;

native/pre do
    ##include <uv.h>
end

native/pos do
    ##define ceu_callback_env(cmd,evt,params) ceu_uv_callback(cmd,evt,params)

    uv_loop_t ceu_uv_loop;

    uv_timer_t ceu_uv_timer;
    s32 ceu_uv_timer_next_us;
    void ceu_uv_timer_cb (uv_timer_t* timer) {
        ceu_dbg_assert(timer == &ceu_uv_timer);
        s32 us = ceu_uv_timer_next_us;
        ceu_go_ext(CEU_INPUT__WCLOCK, &us);
    }

    void ceu_uv_init (void) {
        signal(SIGPIPE, SIG_IGN); // TODO: fails on "uv_write" would crash otherwise

        uv_loop_init(&ceu_uv_loop);
        uv_timer_init(&ceu_uv_loop, &ceu_uv_timer);
    }

    void ceu_uv_step (void) {
        // TODO: detect/error if return w/o "escape"
        uv_run(&ceu_uv_loop, UV_RUN_ONCE);
    }

    void ceu_uv_wclock (s32 us) {
        if (us == CEU_WCLOCK_INACTIVE) {
            uv_timer_stop(&ceu_uv_timer);
        } else if (us <= 0) {
            ceu_uv_timer_next_us = 0;
            uv_timer_start(&ceu_uv_timer, ceu_uv_timer_cb, 0, 0);
        } else {
            ceu_uv_timer_next_us = us;
            uv_timer_start(&ceu_uv_timer, ceu_uv_timer_cb, ceu_uv_timer_next_us/1000, 0);
        }
    }

    tceu_callback_ret ceu_uv_callback (int cmd, tceu_callback_arg p1, tceu_callback_arg p2)
    {
        tceu_callback_ret ret;

        switch (cmd) {
            case CEU_CALLBACK_INIT:
                ret.is_handled = 1;
                ceu_uv_init();
                break;
            case CEU_CALLBACK_STEP:
                ret.is_handled = 1;
                ceu_uv_step();
                break;
            case CEU_CALLBACK_WCLOCK_MIN:
                ret.is_handled = 1;
                ceu_uv_wclock(p1.num);
            default:
                ret.is_handled = 0;
        }

        return ret;
    }
end

#if 0


// TODO: int, u32 => ssize_t, size_t

#include "c.ceu"

native @plain
        _uv_connect_t,
        _uv_fs_t,
        _uv_stat_t,

native @pure
        _GET_HOST_U32(),
        _uv_is_readable(),
        _uv_is_writable(),
        _uv_strerror();

native @nohold
        _ceu_uv_fs_close_(),
        _ceu_uv_tcp_connect(),  // TODO: diconnect?
        _ceu_uv_tcp_getpeerport(),
        _ceu_uv_tcp_getsockport(),
        _uv_inet_ntop(),
        _uv_tcp_getpeername(),

native/pre do
end

native do
    int ceu_uv_tcp_getpeerport (uv_tcp_t* tcp) {
        sockaddr_in name;
        int namelen = sizeof(name);
        uv_tcp_getpeername(tcp, (sockaddr*)&name, &namelen);
        char addr[16];
        uv_inet_ntop(AF_INET, &name.sin_addr, addr, sizeof(addr));
        int port = ntohs(name.sin_port);
        //_printf("%s:%d\n", (_char&&)&&addr, port);
        return port;
    }
    int ceu_uv_tcp_getsockport (uv_tcp_t* tcp) {
        sockaddr_in name;
        int namelen = sizeof(name);
        uv_tcp_getsockname(tcp, (sockaddr*)&name, &namelen);
        char addr[16];
        uv_inet_ntop(AF_INET, &name.sin_addr, addr, sizeof(addr));
        int port = ntohs(name.sin_port);
        //_printf("%s:%d\n", (_char&&)&&addr, port);
        return port;
    }
end

#define GET_HOST_U32(bytes,off) _ntohl(*((u32&&)&&(((_byte&&)&&bytes)[off])))

#define PUT_NETWORK_U32(bytes,off,host)             \
    do                                              \
        var u32 network = _htonl(host);             \
        _ceu_vector_copy_buffer(&&(bytes), off,     \
                                (byte&&)&&network,  \
                                sizeof(u32),1);     \
    end

input (_uv_stream_t&&,_ssize_t, _uv_buf_t&&) UV_READ;
input (_uv_write_t&&,int)   UV_WRITE;
input (_uv_stream_t&&,int)  UV_LISTEN;
input (_uv_connect_t&&,int) UV_CONNECT;

class UV_FS_Read_Line with
    var UV_FS_open& open;
    var char[]&     line;
    var u32&        offset;
    function (UV_FS_open& open, byte[]& line, u32& offset)=>UV_FS_Read_Line run;
do
    function (UV_FS_open& open, byte[]& line, u32& offset)=>UV_FS_Read_Line run do
        this.open   = &open;
        this.line   = &line;
        this.offset = &offset;
    end

    // TODO: reading 1-by-1
    loop do
        var char[1] buf;
        var int ret = do UV_FS_read.run(&open, &buf, 1, this.offset);
        this.offset = offset + 1;
        if ret == 0 then
            escape _UV_EOF;
        else
            _assert(ret == 1);
        end
        if buf[0] == '\n' then
            break;
        end
        this.line = []..line..buf;
    end

    escape 0;
end

// TODO: rename UV_Stream_Reader/Writer? build->run?
// TODO: function to signal "consumption", if the org is finalized w/ pending
//       consumption, then error

class UV_Stream_ReadUntil with
    var UV_Stream_Read& reader;
    var u32             limit;
    function (UV_Stream_Read& reader, u32 limit)=>UV_Stream_ReadUntil run;
do
    function (UV_Stream_Read& reader, u32 limit)=>UV_Stream_ReadUntil run do
        this.reader = &reader;
        this.limit  = limit;
    end

    if reader.next >= this.limit then
        escape 0;
    end

    watching this.reader do
        loop do
            var int dt = await this.reader.ok;
            if dt < 0 then
                // TODO: versions w/ assert/escape
                _printf("error[%d]: %s\n", dt, _uv_strerror(dt));
                _assert(0);
                escape dt;
            end
            if this.reader.next >= this.limit then
                escape 0;
            end
        end
    end

    escape -1;
end

class UV_TCP_Client with
    var char[]& ip;
    var int port;
    event int ok;
output:
    var _uv_tcp_t& tcp;

    function (char[]& ip, int port)=>UV_TCP_Client build;
do
    function (char[]& ip, int port)=>UV_TCP_Client build do
        this.ip   = &ip;
        this.port = port;
    end

    // CLIENT
    var _uv_tcp_t&? tcp_;
    finalize
        tcp_ = &_malloc(sizeof(_uv_tcp_t));
    with
        // free after uv_close
    end
    this.tcp = &tcp_!;
    _ceu_uv_tcp_init(&&tcp)
        finalize with
            _ceu_uv_close((_uv_handle_t&&)&&tcp);
        end;

    var _uv_connect_t&? connect_;
    finalize
        connect_ = &_malloc(sizeof(_uv_connect_t));
    with
        // free on uv callback
    end

    var _sockaddr_in dest = _sockaddr_in();
    _uv_ip4_addr((_char&&)&&this.ip, this.port, &&dest);
    _ceu_uv_tcp_connect(&&connect_!, &&tcp, (_sockaddr&&)&&dest);

    do
        var _uv_connect_t&& c;
        var int err;
        (c,err) = await UV_CONNECT until c==&&connect_!;
        emit this.ok => err;
    end

    do
        var _uv_stream_t&& s;
        var int err;
        (s,err) = await UV_ERROR until (s==(_uv_stream_t&&)&&this.tcp);
        escape err;
    end
end

#endif
#endif
