#ifndef _UV_TCP_CEU
#define _UV_TCP_CEU

#include "uv/stream.ceu"

native/plain
    _uv_tcp_t,
;

native/nohold
    _uv_tcp_bind,         // TODO: unbind?
    _uv_tcp_getsockname,
;

native
    _ceu_uv_tcp_init,
    _uv_tcp_t_ptr,
;

native/pre do
    typedef uv_tcp_t* uv_tcp_t_ptr;
end

native/pos do
    ##define ceu_uv_tcp_init(a) uv_tcp_init(&ceu_uv_loop, a);
end

#if 0
code/await UV_TCP_open (void) => void
do
    var& _uv_tcp_t_ptr? tcp = &_malloc(sizeof(_uv_tcp_t))
        finalize (tcp) with
            // free after uv_close
        end;

    _ceu_uv_tcp_init(tcp);
    do finalize with
        _ceu_uv_close(tcp as _uv_handle_t&&);
    end

    var UV_Stream stream_ = val UV_Stream(&tcp!);
    stream = &stream_;
end
#endif

#endif
